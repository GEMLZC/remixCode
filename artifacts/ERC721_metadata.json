{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "描述：授权某个地址管理特定的ERC721代币 参数： _approved：被授权的地址 _tokenId：代币的唯一识别 ID"
				},
				"balanceOf(address)": {
					"notice": "描述：返回指定地址所拥有的代币数量 参数：_owner：代币拥有者的地址 返回值：该地址拥有的代币数量"
				},
				"getApproved(uint256)": {
					"notice": "描述：获取被授权管理特定代币的地址 参数：_tokenId：代币的唯一识别 ID 返回值：被授权的管理该代币的地址"
				},
				"isApprovedForAll(address,address)": {
					"notice": "描述：查询一个操作者是否被批准管理某个所有者的所有代币 参数： _owner：代币拥有者的地址 _operator：操作者的地址 返回值：是否被授权的布尔值"
				},
				"ownerOf(uint256)": {
					"notice": "描述：查询某个代币的所有者 参数：_tokenId：代币的唯一识别 ID 返回值：拥有此代币的地址"
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "描述：安全地将代币从一个地址转移到另一个地址，调用时会检查接收者地址是否具备处理 ERC721 代币的能力 参数： _from：当前代币的拥有者地址 _to：代币将要被转移至的目标地址 _tokenId：将要被转移的代币的 ID data：额外的数据，可能会在调用中使用"
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "描述：安全地将代币从一个地址转移到另一个地址，调用时会检查接收者地址是否具备处理 ERC721 代币的能力 参数： _from：当前代币的拥有者地址 _to：代币将要被转移至的目标地址 _tokenId：将要被转移的代币的 ID data：额外的数据，可能会在调用中使用"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "描述：将一个操作者地址设置为被批准或取消批准管理所有代币的权利 参数： _operator：操作者的地址 _approved：批准或取消批准的标志"
				},
				"supportsInterface(bytes4)": {
					"notice": "作用场景： 当合约A需要调用合约B的特定功能（如转账、查询余额）时， 可先通过supportsInterface检查合约B是否支持相关接口（如ERC20、ERC721），避免调用失败。 实际应用场景 1. ​DeFi协议集成 钱包或交易所调用supportsInterface检测代币合约是否兼容ERC20，以决定是否展示余额或支持交易。 2. ​NFT市场 交易平台通过检查IERC721Receiver接口（ID：0x150b7a02），确认目标合约能否安全接收NFT，避免资产锁定。 3. ​可升级合约 代理合约在升级后，调用方需验证新逻辑合约是否支持原有接口，确保兼容性"
				},
				"transferFrom(address,address,uint256)": {
					"notice": "描述：将代币从一个地址转移到另一个地址，不检查接收者地址是否能处理 ERC721 代币 参数： _from：当前代币的拥有者地址 _to：代币将要被转移至的目标地址 _tokenId：将要被转移的代币的 ID"
				}
			},
			"notice": "​授权： 单个授权：调用approve，设置单个代币的授权地址。 批量授权：调用setApprovalForAll，设置操作者的批量授权状态。 ​转账： 普通转账：调用transferFrom，直接转账，不检查接收方。 安全转账：调用safeTransferFrom（两种形式），在转账后检查接收方是否为合约且实现了onERC721Received。 ​查询： 查询余额：balanceOf 查询所有者：ownerOf 查询单个授权：getApproved 查询批量授权：通过公共映射isApprovedForAll自动生成的getter函数。",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/base/ERC721Test.sol": "ERC721"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/base/ERC721Test.sol": {
			"keccak256": "0xdfd8c4dfd274090a087bc1f22c6505826f5b91b9969dbcbc5365f0f50729d53a",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5b7881bdb9a50444456b83ca21527cf1083c3cba853fde907d27a8151c207daa",
				"dweb:/ipfs/QmYn6ytbqatJDXaQXy71vsnVbodBn5dMHTivvf4ECSojJZ"
			]
		}
	},
	"version": 1
}